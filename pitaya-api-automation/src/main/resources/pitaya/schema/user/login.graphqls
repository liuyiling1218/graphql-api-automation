input LoginInput{
    username:String!
    #    password:String or sms code
    checkCode:String!
}

type LoginPayload{
    token:String
}

input SendSmsInput{
    mobile:String
}

type SendSmsPayload{
    success: Boolean!
}
type PermissionPayLoad{
    authId:Int
    authKey:String
    authPath:String
    authName:String
    leaf:Int
}

input ChangePwdInput{
    oldPwd:String
    newPwd:String
}
type ChangePwdPayload{
    success:Boolean
}

input BindOrgInput{
    orgId:Int
    bindToken:String
}
type BindOrgPayload{
    token:String
}
input ListUserOrgInput{
    # 非必填 二次登录之后，可以不传
    tempToken: String
}

input LoginPwdInput{
    username:String!
    #    password:String
    pwd:String!
}

type LoginPwdPayload{
    token:String
    #是否需要修改密码
    needUpdatePassword:Boolean
}

extend type Query{
    permissions:[PermissionPayLoad]
    loginUserInfo:UserPayload

}


extend type Mutation{
    login(loginInput:LoginInput):LoginPayload
    sendSms(sendSmsInput:SendSmsInput):SendSmsPayload
    #1.9 新增密码登录接口
    loginPwd(loginPwdInput:LoginPwdInput):LoginPwdPayload
    #1.9 新增 登录用户绑定分拣仓接口
    bindOrg(bindOrgInput:BindOrgInput):BindOrgPayload
    # 1.9 新增密码修改接口
    changePwd(changePwdInput:ChangePwdInput):ChangePwdPayload
}
